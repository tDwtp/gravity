#ifndef __GRAVITY__
#define __GRAVITY__

// NEVER MERGE THIS INTO THE MAIN BRANCH! EVER!

// This is just an overview~~
// For all people out there that wish to expand the documentation.

// For the love of god: keep them sorted by name, please!
// And group them by header files.

// A *.def generated by tcc -impdef gravityapi.dll is here too.
// It has some comments telling you where to find the headerfile

// errors found:
// - not exported: shared/gravity_value#gravity_function_setouter
// - not exported: shared/gravity_value#gravity_value_blacken
// - overloaded: shared/gravity_value#gravity_function_deserialize 

// non-exposable headders:
// - gravity_memory

// rework:
// - move config from g*_value to g*_config (at least define them there)
//   also, put version info there please
//   MAX_* CPOOL_* DEFAULT_* GRAVITY_*
//   basically until MARK: - STRUCT -
// - define gravity_vm inside gravity_vm.h WHAT!?
// - PATH_SEPARATOR should not be dependent on _MSC_VER but rather on WIN32/_WIN32/WIN64/...
// - create gravity_node.h

// useless includes:
// > g_*value
//   - gravity_memory.h
//   - debug_macros.h
//   - 
//   - 


// !ok *need-export ~unused/move-to-*.c ?todo +add !_>changeto
// [internal] currently internal

// required
#include "gravity_compiler.h" // !_value !_delegate !_ast>_node ~_utils ~debug_macros
#include "gravity_core.h" // [internal] !_vm (needs exports)
#include "gravity_hash.h" // !_value
#include "gravity_value.h" // !_array, *_json, ~_memory, ~debug_macros
#include "gravity_vm.h" // !_value, !_delegate

// from tree
#include "gravity_ast.h" // [internal] !_token, !_array ~debug_macros (needs exports)
#include "gravity_array.h" // end
#include "gravity_delegate.h" // !_value
#include "gravity_token.h" // end, [internal] ~debug_macros (needs exports)
#include "gravity_macros.h" // end
#include "gravity_vmmacros.h" // end

#include "gravity_config.h" // end, needs rework
#include "gravity_debug.h" // [internal] !_opcodes; (needs exports)
#include "gravity_memory.h" // end [internal]
#include "gravity_opcodes.h" // end
#include "gravity_utils.h" // end, [internal] (needs exports)

// other
#include "debug_macros.h" // end
#include "gravity_json.h" // (needs exoprts)
#include "gravity_lexer.h" // [internal] !_token !_delegate !debug_macros>_config (needs exports)
#include "gravity_codegen.h" // [internal] !_ast>_node !_delegate ~_value +_vm (needs exports)
#include "gravity_ircode.h" // [internal] !_opcodes !_array (needs exports)
#include "gravity_optimizer.h" // [internal] !_value ~_macros (needs exports)
#include "gravity_parser.h" // [internal] !_ast>_node !_compiler ~debug_macros (needs exoprts) +_delegate +_node
#include "gravity_semacheck1.h" // [internal] >_semacheck? !_ast>_node !_delegate (needs exports)
#include "gravity_semacheck2.h" // [internal] >_semacheck? !_ast>_node !_delegate (needs exports)
#include "gravity_symboltable.h" // [internal] !_ast>_node ~debug_macros +_config (needs exports)
#include "gravity_visitor.h" // [internal] !_ast (needs exports)


#ifdef __cplusplus
extern "C" {
#endif

////////////////////
// gravity_core.h //
////////////////////

GRAVITY_API gravity_class_t *gravity_core_class_from_name (const char *name);
GRAVITY_API void             gravity_core_free (void);
GRAVITY_API const char     **gravity_core_identifiers (void);
GRAVITY_API void             gravity_core_init (void);
GRAVITY_API void             gravity_core_register (gravity_vm *vm);
GRAVITY_API bool             gravity_iscore_class (gravity_class_t *c);



////////////////////////
// gravity_compiler.h //
////////////////////////

typedef struct gravity_compiler_t   gravity_compiler_t;

GRAVITY_API gnode_t             *gravity_compiler_ast (gravity_compiler_t *compiler);
GRAVITY_API gravity_compiler_t  *gravity_compiler_create (gravity_delegate_t *delegate);
GRAVITY_API void                 gravity_compiler_free (gravity_compiler_t *compiler);
GRAVITY_API gravity_closure_t   *gravity_compiler_run (gravity_compiler_t *compiler, const char *source, size_t len, uint32_t fileid, bool is_static, bool add_debug);
GRAVITY_API json_t              *gravity_compiler_serialize (gravity_compiler_t *compiler, gravity_closure_t *closure);
GRAVITY_API bool                 gravity_compiler_serialize_infile (gravity_compiler_t *compiler, gravity_closure_t *closure, const char *path);
GRAVITY_API void                 gravity_compiler_transfer (gravity_compiler_t *compiler, gravity_vm *vm);



////////////////////
// gravity_hash.h //
////////////////////

// CALLBACK functions
typedef bool        (*gravity_hash_compare_fn) (gravity_value_t value1, gravity_value_t value2, void *data);
typedef uint32_t    (*gravity_hash_compute_fn) (gravity_value_t key);
typedef bool        (*gravity_hash_isequal_fn) (gravity_value_t v1, gravity_value_t v2);
typedef void        (*gravity_hash_iterate_fn) (gravity_hash_t *hashtable, gravity_value_t key, gravity_value_t value, void *data);
typedef void        (*gravity_hash_iterate2_fn) (gravity_hash_t *hashtable, gravity_value_t key, gravity_value_t value, void *data1, void *data2);
typedef void        (*gravity_hash_iterate3_fn) (gravity_hash_t *hashtable, gravity_value_t key, gravity_value_t value, void *data1, void *data2, void *data3);
typedef void        (*gravity_hash_transform_fn) (gravity_hash_t *hashtable, gravity_value_t key, gravity_value_t *value, void *data);

// PUBLIC functions
GRAVITY_API gravity_hash_t  *gravity_hash_create (uint32_t size, gravity_hash_compute_fn compute, gravity_hash_isequal_fn isequal, gravity_hash_iterate_fn free, void *data);
GRAVITY_API void             gravity_hash_free (gravity_hash_t *hashtable);
GRAVITY_API gravity_value_t *gravity_hash_lookup (gravity_hash_t *hashtable, gravity_value_t key);
GRAVITY_API gravity_value_t *gravity_hash_lookup_cstring (gravity_hash_t *hashtable, const char *key);
GRAVITY_API bool             gravity_hash_insert (gravity_hash_t *hashtable, gravity_value_t key, gravity_value_t value);
GRAVITY_API bool             gravity_hash_isempty (gravity_hash_t *hashtable);
GRAVITY_API bool             gravity_hash_remove  (gravity_hash_t *hashtable, gravity_value_t key);

GRAVITY_API void             gravity_hash_append (gravity_hash_t *hashtable1, gravity_hash_t *hashtable2);
GRAVITY_API bool             gravity_hash_compare (gravity_hash_t *hashtable1, gravity_hash_t *hashtable2, gravity_hash_compare_fn compare, void *data);
GRAVITY_API uint32_t         gravity_hash_compute_buffer (const char *key, uint32_t len);
GRAVITY_API uint32_t         gravity_hash_compute_int (gravity_int_t n);
GRAVITY_API uint32_t         gravity_hash_compute_float (gravity_float_t f);
GRAVITY_API uint32_t         gravity_hash_count (gravity_hash_t *hashtable);
GRAVITY_API void             gravity_hash_dump (gravity_hash_t *hashtable);
GRAVITY_API void             gravity_hash_iterate (gravity_hash_t *hashtable, gravity_hash_iterate_fn iterate, void *data);
GRAVITY_API void             gravity_hash_iterate2 (gravity_hash_t *hashtable, gravity_hash_iterate2_fn iterate, void *data1, void *data2);
GRAVITY_API void             gravity_hash_iterate3 (gravity_hash_t *hashtable, gravity_hash_iterate3_fn iterate, void *data1, void *data2, void *data3);
GRAVITY_API uint32_t         gravity_hash_memsize (gravity_hash_t *hashtable);
GRAVITY_API void             gravity_hash_resetfree (gravity_hash_t *hashtable);
GRAVITY_API void             gravity_hash_stat (gravity_hash_t *hashtable);
GRAVITY_API void             gravity_hash_transform (gravity_hash_t *hashtable, gravity_hash_transform_fn iterate, void *data);

// NOTE: some are inside gravity_value.h for whatever reason!? move !them



/////////////////////
// gravity_value.h //
/////////////////////

// MARK: - CLASS -
GRAVITY_API int16_t             gravity_class_add_ivar (gravity_class_t *c, const char *identifier);
GRAVITY_API void                gravity_class_bind (gravity_class_t *c, const char *key, gravity_value_t value);
GRAVITY_API void                gravity_class_blacken (gravity_vm *vm, gravity_class_t *c);
GRAVITY_API uint32_t            gravity_class_count_ivars (gravity_class_t *c);
GRAVITY_API gravity_class_t    *gravity_class_deserialize (gravity_vm *vm, json_value *json);
GRAVITY_API void                gravity_class_dump (gravity_class_t *c);
GRAVITY_API void                gravity_class_free (gravity_vm *vm, gravity_class_t *c);
GRAVITY_API void                gravity_class_free_core (gravity_vm *vm, gravity_class_t *c);
GRAVITY_API gravity_class_t    *gravity_class_get_meta (gravity_class_t *c);
GRAVITY_API gravity_class_t    *gravity_class_getsuper (gravity_class_t *c);
GRAVITY_API bool                gravity_class_grow (gravity_class_t *c, uint32_t n);
GRAVITY_API bool                gravity_class_is_anon (gravity_class_t *c);
GRAVITY_API bool                gravity_class_is_meta (gravity_class_t *c);
GRAVITY_API gravity_object_t   *gravity_class_lookup (gravity_class_t *c, gravity_value_t key);
GRAVITY_API gravity_class_t    *gravity_class_lookup_class_identifier (gravity_class_t *c, const char *identifier);
GRAVITY_API gravity_closure_t  *gravity_class_lookup_closure (gravity_class_t *c, gravity_value_t key);
GRAVITY_API gravity_closure_t  *gravity_class_lookup_constructor (gravity_class_t *c, uint32_t nparams);
GRAVITY_API gravity_class_t    *gravity_class_new_pair (gravity_vm *vm, const char *identifier, gravity_class_t *superclass, uint32_t nivar, uint32_t nsvar);
GRAVITY_API gravity_class_t    *gravity_class_new_single (gravity_vm *vm, const char *identifier, uint32_t nfields);
GRAVITY_API void                gravity_class_serialize (gravity_class_t *c, json_t *json);
GRAVITY_API bool                gravity_class_setsuper (gravity_class_t *subclass, gravity_class_t *superclass);
GRAVITY_API bool                gravity_class_setsuper_extern (gravity_class_t *baseclass, const char *identifier);
GRAVITY_API void                gravity_class_setxdata (gravity_class_t *c, void *xdata);
GRAVITY_API uint32_t            gravity_class_size (gravity_vm *vm, gravity_class_t *c);

// MARK: - CLOSURE -
GRAVITY_API void                gravity_closure_blacken (gravity_vm *vm, gravity_closure_t *closure);
GRAVITY_API void                gravity_closure_dec_refcount (gravity_vm *vm, gravity_closure_t *closure);
GRAVITY_API void                gravity_closure_free (gravity_vm *vm, gravity_closure_t *closure);
GRAVITY_API void                gravity_closure_inc_refcount (gravity_vm *vm, gravity_closure_t *closure);
GRAVITY_API gravity_closure_t  *gravity_closure_new (gravity_vm *vm, gravity_function_t *f);
GRAVITY_API uint32_t            gravity_closure_size (gravity_vm *vm, gravity_closure_t *closure);

// MARK: - FIBER -
GRAVITY_API void                gravity_fiber_blacken (gravity_vm *vm, gravity_fiber_t *fiber);
GRAVITY_API void                gravity_fiber_free (gravity_vm *vm, gravity_fiber_t *fiber);
GRAVITY_API gravity_fiber_t    *gravity_fiber_new (gravity_vm *vm, gravity_closure_t *closure, uint32_t nstack, uint32_t nframes);
GRAVITY_API void                gravity_fiber_reassign (gravity_fiber_t *fiber, gravity_closure_t *closure, uint16_t nargs);
GRAVITY_API void                gravity_fiber_reset (gravity_fiber_t *fiber);
GRAVITY_API void                gravity_fiber_seterror (gravity_fiber_t *fiber, const char *error);
GRAVITY_API uint32_t            gravity_fiber_size (gravity_vm *vm, gravity_fiber_t *fiber);

// MARK: - FUNCTION -
GRAVITY_API void                gravity_function_blacken (gravity_vm *vm, gravity_function_t *f);
GRAVITY_API uint16_t            gravity_function_cpool_add (gravity_vm *vm, gravity_function_t *f, gravity_value_t v);
GRAVITY_API gravity_value_t     gravity_function_cpool_get (gravity_function_t *f, uint16_t i);
GRAVITY_API uint32_t           *gravity_bytecode_deserialize (const char *buffer, size_t len, uint32_t *ninst);
GRAVITY_API gravity_function_t *gravity_function_deserialize (gravity_vm *vm, json_value *json);
GRAVITY_API void                gravity_function_dump (gravity_function_t *f, code_dump_function codef);
GRAVITY_API void                gravity_function_free (gravity_vm *vm, gravity_function_t *f);
GRAVITY_API gravity_function_t *gravity_function_new (gravity_vm *vm, const char *identifier, uint16_t nparams, uint16_t nlocals, uint16_t ntemps, void *code);
GRAVITY_API gravity_function_t *gravity_function_new_bridged (gravity_vm *vm, const char *identifier, void *xdata);
GRAVITY_API gravity_function_t *gravity_function_new_internal (gravity_vm *vm, const char *identifier, gravity_c_internal exec, uint16_t nparams);
GRAVITY_API gravity_function_t *gravity_function_new_special (gravity_vm *vm, const char *identifier, uint16_t index, void *getter, void *setter);
GRAVITY_API gravity_list_t     *gravity_function_params_get (gravity_vm *vm, gravity_function_t *f);
GRAVITY_API void                gravity_function_serialize (gravity_function_t *f, json_t *json);
GRAVITY_API void                gravity_function_setouter (gravity_function_t *f, gravity_object_t *outer);
GRAVITY_API void                gravity_function_setxdata (gravity_function_t *f, void *xdata);
GRAVITY_API uint32_t            gravity_function_size (gravity_vm *vm, gravity_function_t *f);

// MARK: - INSTANCE -
GRAVITY_API void                gravity_instance_blacken (gravity_vm *vm, gravity_instance_t *i);
GRAVITY_API gravity_instance_t *gravity_instance_clone (gravity_vm *vm, gravity_instance_t *src_instance);
GRAVITY_API void                gravity_instance_free (gravity_vm *vm, gravity_instance_t *i);
GRAVITY_API bool                gravity_instance_isstruct (gravity_instance_t *i);
GRAVITY_API gravity_closure_t  *gravity_instance_lookup_event (gravity_instance_t *i, const char *name);
GRAVITY_API gravity_value_t     gravity_instance_lookup_property (gravity_vm *vm, gravity_instance_t *i, gravity_value_t key);
GRAVITY_API gravity_instance_t *gravity_instance_new (gravity_vm *vm, gravity_class_t *c);
GRAVITY_API void                gravity_instance_serialize (gravity_instance_t *i, json_t *json);
GRAVITY_API void                gravity_instance_setivar (gravity_instance_t *instance, uint32_t idx, gravity_value_t value);
GRAVITY_API void                gravity_instance_setxdata (gravity_instance_t *i, void *xdata);
GRAVITY_API uint32_t            gravity_instance_size (gravity_vm *vm, gravity_instance_t *i);

// MARK: - LIST -
GRAVITY_API void                gravity_list_append_list (gravity_vm *vm, gravity_list_t *list1, gravity_list_t *list2);
GRAVITY_API void                gravity_list_blacken (gravity_vm *vm, gravity_list_t *list);
GRAVITY_API gravity_list_t     *gravity_list_new (gravity_vm *vm, uint32_t n);
GRAVITY_API void                gravity_list_free (gravity_vm *vm, gravity_list_t *list);
GRAVITY_API gravity_list_t     *gravity_list_from_array (gravity_vm *vm, uint32_t n, gravity_value_t *p);
GRAVITY_API uint32_t            gravity_list_size (gravity_vm *vm, gravity_list_t *list);

// MARK: - MAP -
GRAVITY_API void                gravity_map_append_map (gravity_vm *vm, gravity_map_t *map1, gravity_map_t *map2);
GRAVITY_API void                gravity_map_blacken (gravity_vm *vm, gravity_map_t *map);
GRAVITY_API void                gravity_map_free (gravity_vm *vm, gravity_map_t *map);
GRAVITY_API void                gravity_map_insert (gravity_vm *vm, gravity_map_t *map, gravity_value_t key, gravity_value_t value);
GRAVITY_API gravity_map_t      *gravity_map_new (gravity_vm *vm, uint32_t n);
GRAVITY_API uint32_t            gravity_map_size (gravity_vm *vm, gravity_map_t *map);

// MARK: - MODULE -
GRAVITY_API void                gravity_module_blacken (gravity_vm *vm, gravity_module_t *m);
GRAVITY_API void                gravity_module_free (gravity_vm *vm, gravity_module_t *m);
GRAVITY_API gravity_module_t   *gravity_module_new (gravity_vm *vm, const char *identifier);
GRAVITY_API uint32_t            gravity_module_size (gravity_vm *vm, gravity_module_t *m);

// MARK: - OBJECT -
GRAVITY_API void                gravity_object_blacken (gravity_vm *vm, gravity_object_t *obj);
GRAVITY_API const char         *gravity_object_debug (gravity_object_t *obj, bool is_free);
GRAVITY_API gravity_object_t   *gravity_object_deserialize (gravity_vm *vm, json_value *entry);
GRAVITY_API void                gravity_object_free (gravity_vm *vm, gravity_object_t *obj);
GRAVITY_API void                gravity_object_serialize (gravity_object_t *obj, json_t *json);
GRAVITY_API uint32_t            gravity_object_size (gravity_vm *vm, gravity_object_t *obj);

// MARK: - RANGE -
GRAVITY_API void                gravity_range_blacken (gravity_vm *vm, gravity_range_t *range);
GRAVITY_API gravity_range_t    *gravity_range_deserialize (gravity_vm *vm, json_value *json);
GRAVITY_API void                gravity_range_free (gravity_vm *vm, gravity_range_t *range);
GRAVITY_API gravity_range_t    *gravity_range_new (gravity_vm *vm, gravity_int_t from, gravity_int_t to, bool inclusive);
GRAVITY_API void                gravity_range_serialize (gravity_range_t *r, json_t *json);
GRAVITY_API uint32_t            gravity_range_size (gravity_vm *vm, gravity_range_t *range);

// MARK: - STRING -
GRAVITY_API void                gravity_string_blacken (gravity_vm *vm, gravity_string_t *string);
GRAVITY_API void                gravity_string_free (gravity_vm *vm, gravity_string_t *value);
GRAVITY_API gravity_string_t   *gravity_string_new (gravity_vm *vm, char *s, uint32_t len, uint32_t alloc);
GRAVITY_API void                gravity_string_set(gravity_string_t *obj, char *s, uint32_t len);
GRAVITY_API uint32_t            gravity_string_size (gravity_vm *vm, gravity_string_t *string);
GRAVITY_API gravity_value_t     gravity_string_to_value (gravity_vm *vm, const char *s, uint32_t len);

// MARK: - UPVALUE -
GRAVITY_API void                gravity_upvalue_blacken (gravity_vm *vm, gravity_upvalue_t *upvalue);
GRAVITY_API void                gravity_upvalue_free(gravity_vm *vm, gravity_upvalue_t *upvalue);
GRAVITY_API gravity_upvalue_t  *gravity_upvalue_new (gravity_vm *vm, gravity_value_t *value);
GRAVITY_API uint32_t            gravity_upvalue_size (gravity_vm *vm, gravity_upvalue_t *upvalue);

// MARK: - VALUE -
GRAVITY_API void                gravity_value_blacken (gravity_vm *vm, gravity_value_t v);
GRAVITY_API void                gravity_value_dump (gravity_vm *vm, gravity_value_t v, char *buffer, uint16_t len);
GRAVITY_API bool                gravity_value_equals (gravity_value_t v1, gravity_value_t v2);
GRAVITY_API void                gravity_value_free (gravity_vm *vm, gravity_value_t v);
GRAVITY_API gravity_class_t    *gravity_value_getclass (gravity_value_t v);
GRAVITY_API gravity_class_t    *gravity_value_getsuper (gravity_value_t v);
GRAVITY_API uint32_t            gravity_value_hash (gravity_value_t value);
GRAVITY_API bool                gravity_value_isobject (gravity_value_t v);
GRAVITY_API const char         *gravity_value_name (gravity_value_t value);
GRAVITY_API void                gravity_value_serialize (const char *key, gravity_value_t v, json_t *json);
GRAVITY_API uint32_t            gravity_value_size (gravity_vm *vm, gravity_value_t v);
GRAVITY_API bool                gravity_value_vm_equals (gravity_vm *vm, gravity_value_t v1, gravity_value_t v2);
GRAVITY_API void               *gravity_value_xdata (gravity_value_t value);

GRAVITY_API gravity_value_t     gravity_value_from_bool(bool b);
GRAVITY_API gravity_value_t     gravity_value_from_error(const char* msg);
GRAVITY_API gravity_value_t     gravity_value_from_float(gravity_float_t f);
GRAVITY_API gravity_value_t     gravity_value_from_int(gravity_int_t n);
GRAVITY_API gravity_value_t     gravity_value_from_null(void);
GRAVITY_API gravity_value_t     gravity_value_from_object(void *obj);
GRAVITY_API gravity_value_t     gravity_value_from_undefined(void);

// MARK: - CALLBACKS -
// HASH FREE CALLBACK FUNCTION
GRAVITY_API void                gravity_hash_finteralfree (gravity_hash_t *table, gravity_value_t key, gravity_value_t value, void *data);
GRAVITY_API void                gravity_hash_keyfree (gravity_hash_t *table, gravity_value_t key, gravity_value_t value, void *data);
GRAVITY_API void                gravity_hash_keyvaluefree (gravity_hash_t *table, gravity_value_t key, gravity_value_t value, void *data);
GRAVITY_API void                gravity_hash_valuefree (gravity_hash_t *table, gravity_value_t key, gravity_value_t value, void *data);



//////////////////
// gravity_vm.h //
//////////////////

#define GRAVITY_VM_GCENABLED            "gcEnabled"
#define GRAVITY_VM_GCMINTHRESHOLD       "gcMinThreshold"
#define GRAVITY_VM_GCTHRESHOLD          "gcThreshold"
#define GRAVITY_VM_GCRATIO              "gcRatio"
#define GRAVITY_VM_MAXCALLS             "maxCCalls"
#define GRAVITY_VM_MAXBLOCK             "maxBlock"
#define GRAVITY_VM_MAXRECURSION         "maxRecursionDepth"

typedef bool (*vm_filter_cb) (gravity_object_t *obj);
typedef void (*vm_transfer_cb) (gravity_vm *vm, gravity_object_t *obj);
typedef void (*vm_cleanup_cb) (gravity_vm *vm);

GRAVITY_API void                gravity_gray_object (gravity_vm* vm, gravity_object_t *obj);
GRAVITY_API void                gravity_gray_value (gravity_vm* vm, gravity_value_t v);
GRAVITY_API void                gravity_gc_setenabled (gravity_vm* vm, bool enabled);
GRAVITY_API void                gravity_gc_setvalues (gravity_vm *vm, gravity_int_t threshold, gravity_int_t minthreshold, gravity_float_t ratio);
GRAVITY_API void                gravity_gc_start (gravity_vm* vm);
GRAVITY_API void                gravity_gc_tempnull (gravity_vm *vm, gravity_object_t *obj);
GRAVITY_API void                gravity_gc_temppush (gravity_vm *vm, gravity_object_t *obj);
GRAVITY_API void                gravity_gc_temppop (gravity_vm *vm);

GRAVITY_API char               *gravity_vm_anonymous (gravity_vm *vm);
GRAVITY_API void                gravity_vm_cleanup (gravity_vm* vm);
GRAVITY_API gravity_delegate_t *gravity_vm_delegate (gravity_vm *vm);
GRAVITY_API gravity_closure_t  *gravity_vm_fastlookup (gravity_vm *vm, gravity_class_t *c, int index);
GRAVITY_API gravity_fiber_t    *gravity_vm_fiber (gravity_vm *vm);
GRAVITY_API void                gravity_vm_filter (gravity_vm* vm, vm_filter_cb cleanup_filter);
GRAVITY_API void                gravity_vm_free (gravity_vm *vm);
GRAVITY_API gravity_value_t     gravity_vm_get (gravity_vm *vm, const char *key);
GRAVITY_API gravity_closure_t  *gravity_vm_getclosure (gravity_vm *vm);
GRAVITY_API void               *gravity_vm_getdata (gravity_vm *vm);
GRAVITY_API gravity_value_t     gravity_vm_getslot (gravity_vm *vm, uint32_t index);
GRAVITY_API gravity_value_t     gravity_vm_getvalue (gravity_vm *vm, const char *key, uint32_t keylen);
GRAVITY_API void                gravity_vm_initmodule (gravity_vm *vm, gravity_function_t *f);
GRAVITY_API bool                gravity_vm_isaborted (gravity_vm *vm);
GRAVITY_API bool                gravity_vm_ismini (gravity_vm *vm);
GRAVITY_API gravity_value_t     gravity_vm_keyindex (gravity_vm *vm, uint32_t index);
GRAVITY_API void                gravity_vm_loadclosure (gravity_vm *vm, gravity_closure_t *closure);
GRAVITY_API gravity_closure_t  *gravity_vm_loadbuffer (gravity_vm *vm, const char *buffer, size_t len);
GRAVITY_API gravity_closure_t  *gravity_vm_loadfile (gravity_vm *vm, const char *path);
GRAVITY_API gravity_value_t     gravity_vm_lookup (gravity_vm *vm, gravity_value_t key);
GRAVITY_API gravity_int_t       gravity_vm_maxmemblock (gravity_vm *vm);
GRAVITY_API void                gravity_vm_memupdate (gravity_vm *vm, gravity_int_t value);
GRAVITY_API gravity_vm         *gravity_vm_new (gravity_delegate_t *delegate);
GRAVITY_API gravity_vm         *gravity_vm_newmini (void);
GRAVITY_API void                gravity_vm_reset (gravity_vm *vm);
GRAVITY_API gravity_value_t     gravity_vm_result (gravity_vm *vm);
GRAVITY_API bool                gravity_vm_runclosure (gravity_vm *vm, gravity_closure_t *closure, gravity_value_t sender, gravity_value_t params[], uint16_t nparams);
GRAVITY_API bool                gravity_vm_runmain (gravity_vm *vm, gravity_closure_t *closure);
GRAVITY_API bool                gravity_vm_set (gravity_vm *vm, const char *key, gravity_value_t value);
GRAVITY_API void                gravity_vm_set_callbacks (gravity_vm *vm, vm_transfer_cb vm_transfer, vm_cleanup_cb vm_cleanup);
GRAVITY_API void                gravity_vm_setaborted (gravity_vm *vm);
GRAVITY_API void                gravity_vm_setdata (gravity_vm *vm, void *data);
GRAVITY_API void                gravity_vm_seterror (gravity_vm *vm, const char *format, ...);
GRAVITY_API void                gravity_vm_seterror_string (gravity_vm* vm, const char *s);
GRAVITY_API void                gravity_vm_setfiber(gravity_vm* vm, gravity_fiber_t *fiber);
GRAVITY_API void                gravity_vm_setslot (gravity_vm *vm, gravity_value_t value, uint32_t index);
GRAVITY_API void                gravity_vm_setvalue (gravity_vm *vm, const char *key, gravity_value_t value);
GRAVITY_API double              gravity_vm_time (gravity_vm *vm);
GRAVITY_API void                gravity_vm_transfer (gravity_vm* vm, gravity_object_t *obj);

GRAVITY_API void                gravity_opt_free (void);
GRAVITY_API void                gravity_opt_register (gravity_vm *vm);
GRAVITY_API bool                gravity_isopt_class (gravity_class_t *c);


#ifdef __cplusplus
}
#endif


#endif//__GRAVITY__